use CSCI5308_13_DEVINT;

CREATE TABLE user (
user_id BIGINT NOT NULL AUTO_INCREMENT,
banner_id varchar (255) NOT NULL UNIQUE,
first_name varchar (255) NOT NULL,
last_name varchar (255) NOT NULL,
email varchar (255) NOT NULL UNIQUE,
password varchar (255) NOT NULL,
isActive boolean NOT NULL,

PRIMARY KEY (user_id)

);

CREATE INDEX email_index ON user (email);

CREATE TABLE role (

role_id int NOT NULL AUTO_INCREMENT,
role_name varchar (255) NOT NULL,

PRIMARY KEY (role_id)

);


CREATE TABLE user_role (

user_id BIGINT NOT NULL,
role_id int (15) NOT NULL,

PRIMARY KEY (user_id, role_id),

FOREIGN KEY (user_id) REFERENCES user(user_id),
FOREIGN KEY (role_id) REFERENCES role(role_id)

);


INSERT INTO user values (1, 'B00838558', 'monil', 'panchal', 'monil.panchal@dal.ca', 'password', true);
INSERT INTO user values (2, 'B00000000', 'admin', 'admin', 'admin@dal.ca', 'password', true);

INSERT INTO role values (1, 'ADMIN');
INSERT INTO role values (2, 'INSTRUCTOR');
INSERT INTO role values (3, 'TA');
INSERT INTO role values (4, 'STUDENT');
INSERT INTO role values (5, 'GUEST');


INSERT INTO user_role values (2,1);
INSERT INTO user_role values (1,4);
INSERT INTO user_role values (1,3);


SELECT u.*  , r.role_name FROM user AS u
INNER JOIN user_role AS ur
	ON u.user_id = ur.user_id
INNER JOIN role AS r
	ON ur.role_id = r.role_id
WHERE u.email = 'monil.panchal@dal.ca';

CREATE TABLE user_course_role (
user_id BIGINT NOT NULL,
role_id int (15) NOT NULL,
PRIMARY KEY (user_id, role_id, course_id),
FOREIGN KEY (user_id) REFERENCES user(user_id),
FOREIGN KEY (role_id) REFERENCES role(role_id),
FOREIGN KEY (course_id) REFERENCES course(course_id)
);

create table term
(
    term_id   int auto_increment
        primary key,
    term_name varchar(16) not null
);

create table course
(
    course_id   bigint auto_increment
        primary key,
    course_code varchar(64) not null,
    course_name varchar(64) not null
);

insert into course(course_code, course_name) values("CSCI Test_1", "Course Name");

create table user_course_role
(
    user_id   bigint not null,
    course_id bigint not null,
    role_id   int    not null,
    primary key (user_id, course_id, role_id),
    constraint course_id_fk
        foreign key (course_id) references course (course_id),
    constraint role_id_fk
        foreign key (role_id) references role (role_id),
    constraint user_id_fk
        foreign key (user_id) references user (user_id)
);



CREATE TABLE user_token (

user_id BIGINT NOT NULL,
token varchar (255) NOT NULL,

PRIMARY KEY (user_id),
FOREIGN KEY (user_id) REFERENCES user(user_id)

);

create table question_type
(
    question_type_id  int auto_increment
        primary key,
    qustion_type_text varchar(128) not null,
    constraint question_type_qustion_type_text_uindex
        unique (qustion_type_text)
);

INSERT INTO CSCI5308_13_DEVINT.question_type (question_type_id, qustion_type_text) VALUES (1, 'Numeric');
INSERT INTO CSCI5308_13_DEVINT.question_type (question_type_id, qustion_type_text) VALUES (2, 'Multiple choice - choose one');
INSERT INTO CSCI5308_13_DEVINT.question_type (question_type_id, qustion_type_text) VALUES (3, 'Multiplle choice - choose multiple');
INSERT INTO CSCI5308_13_DEVINT.question_type (question_type_id, qustion_type_text) VALUES (4, 'Free text');

create table questions
(
    question_id    bigint auto_increment
        primary key,
    user_id        bigint                                not null,
    question_type  int                                   not null,
    question_title varchar(255)                          not null,
    question_text  varchar(1023)                         not null,
    question_date  timestamp default current_timestamp() not null,
    constraint questions_question_type_question_type_id_fk
        foreign key (question_type) references question_type (question_type_id),
    constraint questions_user_user_id_fk
        foreign key (user_id) references user (user_id)
);

create table question_options
(
    question_id  bigint        not null,
    option_text  varchar(1023) not null,
    option_value int           not null,
    constraint question_options_question_question_id_fk
        foreign key (question_id) references questions (question_id) on delete cascade
);

CREATE TABLE user_password_history (

user_id BIGINT NOT NULL,
password varchar (255) NOT NULL,
modified_on TIMESTAMP NOT NULL,

FOREIGN KEY (user_id) REFERENCES user(user_id)

);

CREATE TABLE password_policy (

policy_id BIGINT NOT NULL AUTO_INCREMENT,
policy varchar (255) NOT NULL UNIQUE,
value varchar (255) NOT NULL,

PRIMARY KEY (policy_id)

);

INSERT INTO password_policy(policy, value) values('minUppercaseCharacters', 2);
INSERT INTO password_policy(policy, value) values('minLowercaseCharacters', 2);
INSERT INTO password_policy(policy, value) values('minSpecialCharacters', 1);
INSERT INTO password_policy(policy, value) values('minPasswordLength', 3);
INSERT INTO password_policy(policy, value) values('maxPasswordLength', 10);
INSERT INTO password_policy(policy, value) values('passwordHistoryConstraint', 2);
INSERT INTO password_policy(policy, value) values('blockSpecialCharacters', "%");
